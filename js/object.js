// オブジェクト
<!-- 
問題1:オブジェクト（phpの連想配列と同じか）とは何か説明せよ


正解1:データ名（キー）とデータ（値）が連なっている配列



問題2:配列（2）に対するオブジェクト（3）の優位性を説明せよ


正解2:
簡単にいうと、配列の要素が異なる種類で構成されている場合は管理しにくいが、
オブジェクトなら、値にキー（ラベル）がついているので、管理しやすい。

同種類の複数要素で構成される配列（1）ならば把握できるが、
異なる種類の複数要素で構成される配列（2）は把握・管理にしくいので、
種類別に要素が整理されている連想配列（3）の方が管理しやすい。

(1)複数の同種類データ（要素）をまとめて入れている配列
$user_names = ['侍太郎', '侍一郎', '侍二郎', '侍三郎', '侍四郎'];

(2)異なる種類のデータ（要素）をまとめて入れている配列
$personal_data = ['侍太郎', 36, '男性', '東京都', '020-0304-0506',
 '侍花子', 33, '女性', '京都府', '999-9999-9999'];

(3)連想配列 データ名とデータ（要素）が連なっている配列
データ名をつけられるので、異なる種類のデータも格段に管理しやすい
$personal_data1 = ['name' => '侍太郎', 'age' => 36, 'gender' => '男性', 
'address' => '東京都', 'phone_number' => '070-0809-1160'];
$personal_data2 = ['name' => '侍花子', 'age' => 33, 'gender' => '女性', 
'address' => '京都府', 'phone_number' => '999-9999-9999'];


問題3:
・次のオブジェクトで「キー」と「値」はどの部分か？
------------------------------------------------------------
const personalData = { name: '侍太郎', age: 36, gender: '男性' };
------------------------------------------------------------

・配列を宣言するときは基本的に定数（const）を使う理由をいえ。
  
・キーの意味と役割をいえ
・プロパティ（要素）とは何か



正解3:
------------------------------------------------------------
const personalData = { name: '侍太郎', age: 36, gender: '男性' };
                     | キー |   値  |
------------------------------------------------------------
・理由:配列の要素（値）を全て再代入することは、ほとんどないので、変数は使われない。

・意味:値が何を表すのかわかりやすく名前をつけたもの（値のラベル）
  役割:値の管理（ってことにしておく）
       オブジェクトは、値にキーを付けて管理 ⇔ 配列は、値にインデックス（番号）を付けて管理

・プロパティ（要素）＝［キー＋値］のセット



問題4:次のオブジェクトについて、問に答えよ。
const personalData = { name: '侍太郎', age: 36, gender: '男性' };

1:オブジェクトの構文を書け

2:オブジェクトの値を取得する構文を書け
  上のオブジェクトの値「男性」を取得し、出力せよ

3:オブジェクトの値を更新する構文を書け
  上のオブジェクトの'age'というキーの値「36」を「37」に更新せよ

4:オブジェクトの値を末尾に追加する構文を書け
  上のオブジェクトに「address:'東京都'」を追加せよ







正解4:取得・更新・追加の構文は《ドット記法》がラクチン
1:オブジェクトの構文
------------------------------------------------------------
配列名＝ { キー:値,キー:値, キー:値};
------------------------------------------------------------
キーと値を「:」（コロン）で結ぶ

2 取得の構文:
ブラケット記法:  オブジェクト名['取得する値のキー'] 
ドット記法:      オブジェクト名.キー名
 
3 更新の構文:
ブラケット記法:  オブジェクト名['更新する値のキー'] = 更新する値;
ドット記法:      オブジェクト名.追加する値のキー名= 更新する値;

4 追加の構文:
ブラケット記法:  オブジェクト名['末尾に追加する値のキー'] = 追加する値;
ドット記法:      オブジェクト名.末尾に追加する値のキー名= 追加する値;

------------------------------------------------------------
const personalData = { name: '侍太郎', age: 36, gender: '男性' };

// 'gender'というキーを持つ値（'男性'）を出力(ブラケット記法とドット記法)
console.log(personalData['gender']);
console.log(personalData.gender);

// 'age'というキーの値を更新する(ブラケット記法とドット記法)
personalData['age'] = 37;
personalData.age = 37;

// 新しくプロパティ（キーと値）を追加する(ブラケット記法とドット記法)
personalData['address']  = '東京都';
personalData.address = '東京都';

//オブジェクトのプロパティ（要素）を全て出力
console.log(personalData);
------------------------------------------------------------

問6:
定数（const）は、あとから中身を入れ替えられない（再代入できない）が、
配列の要素の更新・追加が可能な理由をいえ。




正解6:
理由:要素の更新や追加は再代入にあたらないため。





// ------------------------------------------------------------

// オブジェクトの宣言と値の代入を行う
// const personalDate = { name:'侍太郎', age:36, gender:'男性' };

// // オブジェクトの値を出力する
// console.log(personalDate);

// // 'age'というキーの値を更新する
// personalDate.age = 37;

// // 新しくプロパティ（キーと値）を追加する
// personalDate.adress = '東京都';

// // オブジェクトの値を出力する
// console.log(personalDate);

// // 'gender'というキーの値を出力する
// console.log(personalDate.gender);